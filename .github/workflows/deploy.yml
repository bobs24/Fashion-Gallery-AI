name: Build and Deploy to EC2

# This workflow runs automatically on every push to the 'master' branch
on:
  push:
    branches: [ "master" ]

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/fashion-gallery-backend:latest

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/fashion-gallery-frontend:latest

  deploy:
    name: Deploy to EC2 Server
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          # Create the project directory on the server if it doesn't exist
          mkdir -p ~/fashion-gallery-ai/backend
          cd ~/fashion-gallery-ai

          # Create or overwrite the .env file for the backend using the secrets
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > ./backend/.env
          echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> ./backend/.env
          echo "METABASE_URL=${{ secrets.METABASE_URL }}" >> ./backend/.env
          echo "METABASE_USERNAME=${{ secrets.METABASE_USERNAME }}" >> ./backend/.env
          echo "METABASE_PASSWORD=${{ secrets.METABASE_PASSWORD }}" >> ./backend/.env
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> ./backend/.env

          # Create or overwrite the docker-compose.yml file on the server
          # Note: We must escape the dollar signs for the shell
          echo '${{ secrets.DOCKER_COMPOSE_PROD }}' > docker-compose.yml
          
          # Pull the latest images that we just pushed to Docker Hub
          docker-compose pull
          
          # Stop the old running containers and start the new ones
          docker-compose up -d --remove-orphans
          
          # Clean up any old, unused Docker images to save disk space
          docker image prune -f